type Block @entity {
	id: ID!
	hash: String
	timestamp: Date
	parentHash: String
	specVersion: String
	stateRoot: String
	extrinsicsRoot: String
	size: Int
	
	extrinsics: [Extrinsic] @derivedFrom(field: "block")
	transactions: [Transaction] @derivedFrom(field: "block")
	events: [Event] @derivedFrom(field: "block")
	# collators, blockReward, status/finalized, gasUsed, gasLimit
}


type Extrinsic  @entity {
	id: ID!
	hash: String
	block: Block
	isSigned: Boolean
	signer: Account
	section: String
	method: String
	index: Int
	success: Boolean
	transaction: Transaction
	arguments: String
	# lifeTime, evm, nonce
}


type Event @entity {
	id: ID!
	index: Int
	block: Block
	timestamp: Date
	section: String
	method: String
	docs: String
	arguments: String
	data: String
	extrinsic: Extrinsic
}


type Account @entity {
	id: ID!
	# Contracts
	isContract: Boolean
	creator: Account
	createdAt: Transaction
}


type Log @entity {
	id: ID!
	transaction: Transaction
	transactionIndex: Int
	block: Block
	timestamp: Date
	address: String
	data: String
	topics: String
	arguments: String
	logIndex: Int
	removed: Boolean
}


type Transaction @entity {
	id: ID!
	block: Block
	extrinsic: Extrinsic
	from: Account
	to: Account
	success: Boolean
	value: BigInt
	nonce: Int
	gasLimit: BigInt
	gasPrice: BigInt
	maxFeePerGas: BigInt
	type: Int
	data: String
	arguments: String
	logs: [Log] @derivedFrom(field: "transaction")
	# index (extrinsic), gasUsed/fee, extrinsic, transfers
}


type MOVRTransfer @entity {
	id: ID!
	index: Int
	block: Block
	extrinsic: Extrinsic
	from: Account
	to: Account
	value: String
}


type Timeline @jsonField {
	status: String
	extrinsic: String
	timestamp: Date
}


type Preimage @entity {
	id: ID!
	createdAtExtrinsic: Extrinsic
	author: Account
}


type Proposal @entity {
	id: ID!
	deposit: BigInt
	timeline: [Timeline]
	preimage: Preimage
}


type Referendum @entity {
	id: ID!
	timeline: [Timeline]
	executed: Boolean
	preimage: Preimage
	delay: Int
	end: BigInt
	threshold: String
}

# type BalanceMOVR @entity {
# 	id: ID!
# 	account: Account
# 	type: String
# 	amount: BigInt
# }


type ERC20Balance @entity {
	id: ID!
	account: Account
	token: ERC20Token
	value: BigInt
}


type ERC721Balance @entity {
	id: ID!
	account: Account
	token: ERC721Token
	value: BigInt
}


type ERC20Token @entity {
	id: ID!
	symbol: String
	name: String
	decimal: Int
	supply: BigInt
	balances: [ERC20Balance] @derivedFrom(field: "token")
}


type ERC721Token @entity {
	id: ID!
	symbol: String
	name: String
	supply: [BigInt] #array of token ids
	balances: [ERC721Balance] @derivedFrom(field: "token")
}


type ERC20Transfer @entity {
	id: ID!
	from: Account
	to: Account
	token: ERC20Token
	value: BigInt
	log: Log
}


type ERC721Transfer @entity {
	id: ID!
	from: Account
	to: Account
	token: ERC721Token
	value: BigInt
	log: Log
}


type Collator @entity {
	id: ID!
	joinedExtrinsic: Extrinsic
	active: Boolean
	#blocks: [Block]
	#rewards: []
	#delegators: [Delegator]
}


type Delegator @entity {
	id: ID!
}


# vote/stake/nominating
# rewards, block generated
