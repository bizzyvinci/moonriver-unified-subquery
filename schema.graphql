type Block @entity {
	id: ID!
	number: BigInt! @index(unique: true)
	hash: String
	timestamp: Date
	parentHash: String
	specVersion: String
	stateRoot: String
	extrinsicsRoot: String
	size: Int
	
	extrinsics: [Extrinsic] @derivedFrom(field: "block")
	transactions: [Transaction] @derivedFrom(field: "block")
	events: [Event] @derivedFrom(field: "block")
	# collators, blockReward, status/finalized, gasUsed, gasLimit
}


type Extrinsic  @entity {
	id: ID!
	hash: String!
	block: Block
	blockNumber: BigInt! @index(unique: false)
	isSigned: Boolean
	signer: Account
	section: String
	method: String
	index: Int!
	success: Boolean
	transaction: Transaction @derivedFrom(field: "extrinsic")
	arguments: String
	# lifeTime, evm, nonce
}


type Event @entity {
	id: ID!
	index: Int!
	block: Block
	blockNumber: BigInt! @index(unique: false)
	timestamp: Date
	section: String
	method: String
	docs: String
	arguments: String
	data: String
	extrinsic: Extrinsic
}


type Account @entity {
	id: ID!
	freeBalance: BigInt! @index(unique: false)
	reservedBalance: BigInt! @index(unique: false)
	totalBalance: BigInt! @index(unique: false)
	# Contracts
	isContract: Boolean
	creator: Account
	createdAt: String
}


type Log @entity {
	id: ID!
	transaction: Transaction
	transactionIndex: Int
	block: Block
	timestamp: Date
	address: String
	data: String
	topics: String
	arguments: String
	logIndex: Int
	removed: Boolean
}


type Transaction @entity {
	id: ID!
	block: Block
	blockNumber: BigInt! @index(unique: false)
	extrinsic: Extrinsic
	extrinsicIndex: Int
	from: Account
	to: Account
	success: Boolean
	value: BigInt
	nonce: Int
	gasLimit: BigInt
	gasPrice: BigInt
	maxFeePerGas: BigInt
	type: Int
	data: String
	arguments: String
	logs: [Log] @derivedFrom(field: "transaction")
	# gasUsed/fee, extrinsic, transfers
}


type Transfer @entity {
	id: ID!
	index: Int!
	block: Block!
	blockNumber: BigInt! @index(unique: false)
	extrinsic: Extrinsic
	from: Account!
	to: Account!
	value: BigInt!
}


type Timeline @jsonField {
	status: String
	extrinsic: String
	timestamp: Date
}


type Proposal @entity {
	id: ID!
	propIndex: Int! @index(unique: true)
	deposit: BigInt
	author: String
	preimage: String
	timeline: [Timeline]
}


type Referendum @entity {
	id: ID!
	refIndex: Int! @index(unique: true)
	threshold: String
	timeline: [Timeline]
	executed: Boolean
	#preimage: string
	#delay: Int
	#end: BigInt
}


type Erc20Balance @entity {
	id: ID!
	account: Account
	token: Erc20Token
	value: BigInt
}


type Erc721Balance @entity {
	id: ID!
	account: Account
	token: Erc721Token
	value: BigInt
}


type Erc20Token @entity {
	id: ID!
	symbol: String
	name: String
	decimal: Int
	supply: BigInt
	balances: [Erc20Balance] @derivedFrom(field: "token")
}


type Erc721Token @entity {
	id: ID!
	symbol: String
	name: String
	balances: [Erc721Balance] @derivedFrom(field: "token")
}


type Erc20Transfer @entity {
	id: ID!
	from: Account
	to: Account
	token: Erc20Token
	value: BigInt
	transactionHash: String
	transactionIndex: Int
	blockNumber: BigInt
	timestamp: Date
}


type Erc721Transfer @entity {
	id: ID!
	from: Account
	to: Account
	token: Erc721Token
	value: BigInt
	transactionHash: String
	transactionIndex: Int
	blockNumber: BigInt
	timestamp: Date
}


# There's currently no slash, just rewards
type Reward @entity {
	id: ID!
	blockNumber: BigInt! @index(unique: false)
	account: Account
	value: BigInt
	timestamp: Date
}


type Delegation @entity {
	id: ID!
	delegator: Delegator
	candidate: Candidate
	value: BigInt! @index(unique: false)
}


type Candidate @entity {
	id: ID!
	joined: Date
	isChosen: Boolean
	delegations: [Delegation] @derivedFrom(field: "candidate")
	selfBonded: BigInt!
	totalBonded: BigInt!
	#blocks: [Block]
}


type Delegator @entity {
	id: ID!
	delegations: [Delegation] @derivedFrom(field: "delegator")
}


type Day @entity {
	id: ID!
	year: Int!
	month: Int!
	day: Int!
	extrinsics: BigInt
	transactions: BigInt
	events: BigInt
	transferCounts: BigInt
	transferAmount: BigInt
	erc20TransferCounts: BigInt
	erc721TransferCounts: BigInt
	newContracts: BigInt
}
